1 - criar a tela de login - ok

2 - pagina home - ok

3 - liberar acesso - ok

4 - mudar a porta do microsserviço segurança para 8081 - ok

5 - mudar o login username para ser email no frontend - ok

6 - retornar mensagem do userRecord com as validações ok

7 - continuar o curso da micheli em 1:21 minutos, onde ensina adicionar os Rules de administrador e usuário. - ok

10 - Salva a senha criptografada ok

11 - terminar o body no frontend ok

12 - criar a tela de adm no frontend ok

13 - implementar atributos de usuarios em seguranca ok

14 - implementar bean no mapperstruct ok

16 - criar entidade usuário no microsservico financeiro ok

17 - Quando criar/atualizar/deletar um novo usuário, o microsservico segurança enviar via RABBITMQ para microsservico financeiro o usuário. ok

19 - Adicionar modal apresentando mensagem "Desejar salvar um planejamento?" ok

20 - Caso o planejamento tenha salvo com sucesso, apresentar a mensagem "Operação executado com sucesso" e atualizar a tabela com o planejamento ok

20 - adicionar o cronometro de tempo do token no frontend - OK

--------------------------------------------------------------------------------------------------------------------------------------------------------

INFORMÕES ADICIONAIS:

https://github.com/acenelio/ms-course/tree/main

https://github.com/gostavok/EAD/tree/main
https://github.com/Java-Techie-jt/jwt-apigateway-security

--------------------------------------------------------------------------------------------------------------------------------------------------------

A - transformar meu service-registry em imagem docker para facilitar no desenvolvimento
B - adicionar log para manitoramento de observabilidade no projeto todo - OK
C - resiliencia nos broker - OK
D - adicionar elastSearch
E - cache
F - Adicionar SWAGGER
G - Assistir curso de segurança para aplicação - https://cursos.alura.com.br/course/seguranca-web-em-java-parte-1
H - Assistir curso de documentação - https://cursos.alura.com.br/course/spring-boot-3-documente-teste-prepare-api-deploy


3 - adicionar cor nas mensagem de erro, sucesso e alerta

4 - implementar seguranca no microsservico financeiro

5 - enviar email para o usuário criar a senha (o email tem validade de 30 minutos para ativar, caso contrário entrar em contato com suporte) - OK

6 - pesquisar para adicionar senha com caracteres, letras e números - OK

7 - quando o usuário criar a senha, ativar o usuário - OK

8 - Caso o planejamento deem erro, apresentar a mensagem "Operação falhou": "mensagem do erro" e fazer tratamento de erro via postman 

10 - criar a tela de home - OK

11 - bloquear rotar de administrador

12 - como administrador, função de editar, ativar, excluir e coloca permissções de usuários

13 - baixar em excel todos usuários

14 - filtro de pesquisa de usuário

15 - Tela de login: resetar senha do usuário

16 - Tela de login: recaptch

17 - Tela de login: Relembre


----------------------------------------------------------------------------------------------------------------------------------------------------------

SPRING CLOUD:
Spring Cloud stream - RABBITMQ
Spring Cloud Netfilx
Spring Cloud Gateway

SPRING SECURITY
SPRING BOOT

SPRING DATA:
Spring Data JPA
Spring Data Elasticsearch

POSTGRESQL
ELASTIC STACK - ELASTICSEARCH, KIBANA E LOGSTASH

DOCKER
DOCKER-COMPOSE

MAPSTRUCT
LIQUIBASE
TOKEN JWT
thymeleaf







